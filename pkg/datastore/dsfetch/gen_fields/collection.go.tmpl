// {{.GoName}} has all fields from {{.ModelsName}}.
type {{.GoName}} struct{
    {{- range .Fields}}
    {{.Name}} {{.Type}}
    {{- end}}
    fetch *Fetch
}

func (c *{{.GoName}})lazy(ds *Fetch, id int) {
    c.fetch = ds
    {{- range .Fields}}
    ds.{{.FetchName}}(id).Lazy(&c.{{.Name}})
    {{- end}}
}

{{ range .Relations}}
func (c *{{$.GoName}}) {{.MethodName}}() {{.ResultType}}{
    {{- if .IsList}}
    result := make({{.ResultType}}, len(c.{{.FieldName}}))
    for i, id := range c.{{.FieldName}}{
        result[i] = &ValueCollection[{{.Type}}, *{{.Type}}]{
            id: id,
            fetch: c.fetch,
        }
    }
    return result
    {{- else if .Required}}
    return &ValueCollection[{{.Type}}, *{{.Type}}]{
		id: c.{{.FieldName}},
		fetch: c.fetch,
	}
	{{- else}}
    var result Maybe[*ValueCollection[{{.Type}}, *{{.Type}}]]
	id, hasValue := c.{{.FieldName}}.Value()
	if !hasValue {
		return result
	}
	value := &ValueCollection[{{.Type}}, *{{.Type}}]{
		id:    id,
		fetch: c.fetch,
	}
	result.Set(value)
	return result
	{{- end}}
}
{{end}}

func (r *Fetch){{.GoName}}(id int) *ValueCollection[{{.GoName}}, *{{.GoName}}]{
	return &ValueCollection[{{.GoName}}, *{{.GoName}}]{
		id: id,
		fetch: r,
	}
}
