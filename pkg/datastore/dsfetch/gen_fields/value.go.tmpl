// {{.TypeName}} is a lazy value from the datastore.
type {{.TypeName}} struct {
	collection string
	id         int
	field      string
	value      {{.GoType}}
	required   bool

	executed bool
	isNull   bool

	lazies []*{{.GoType}}

	fetch *Fetch
}

{{if not .MaybeType}}
	// Value returns the value.
	func (v *{{.TypeName}}) Value(ctx context.Context) ({{.GoType}}, error) {
		if err:=v.fetch.err; err != nil {
			v.fetch.err = nil
			return {{.Zero}}, v.fetch.err
		}

		if v.executed {
			return v.value, nil
		}

		if err := v.fetch.Execute(ctx); err != nil {
			return {{.Zero}}, fmt.Errorf("executing request: %w", err)
		}

		return v.value, nil
	}
{{else}}
	// Value returns the value.
	func (v *{{.TypeName}}) Value(ctx context.Context) ({{.GoType}}, bool, error) {
		if err:=v.fetch.err; err != nil {
			v.fetch.err = nil
			return {{.Zero}}, false, v.fetch.err
		}

		if v.executed {
			return v.value, !v.isNull, nil
		}

		if err := v.fetch.Execute(ctx); err != nil {
			return {{.Zero}}, false, fmt.Errorf("executing request: %w", err)
		}

		return v.value, !v.isNull, nil
	}
{{end}}


// Lazy sets a value as soon as it es executed.
//
// Make sure to call request.Execute() before using the value.
func (v *{{.TypeName}}) Lazy(value *{{.GoType}}) {
	v.lazies = append(v.lazies, value)
}

{{if not .MaybeType}}
	// ErrorLater is like Value but does not return an error.
	//
	// If an error happs, it is saved internaly. Make sure to call request.Err() later to
	// access it.
	func (v *{{.TypeName}}) ErrorLater(ctx context.Context) {{.GoType}} {
		if v.fetch.err != nil {
			return {{.Zero}}
		}

		if v.executed {
			return v.value
		}

		if err := v.fetch.Execute(ctx); err != nil {
			return {{.Zero}}
		}

		return v.value
	}
{{else}}
	// ErrorLater is like Value but does not return an error.
	//
	// If an error happs, it is saved internaly. Make sure to call request.Err() later to
	// access it.
	func (v *{{.TypeName}}) ErrorLater(ctx context.Context) ({{.GoType}}, bool) {
		if v.fetch.err != nil {
			return {{.Zero}}, false
		}

		if v.executed {
			return v.value, !v.isNull
		}

		if err := v.fetch.Execute(ctx); err != nil {
			return {{.Zero}}, false
		}

		return v.value, !v.isNull
	}
{{end}}

// execute will be called from request.
func (v *{{.TypeName}}) execute(p []byte) error {
	{{- if eq .TypeName  "ValueIDSlice"}}
		var values []string
		if p == nil {
			if v.required {
				return fmt.Errorf("database is corrupted. Required field %s/%d/%s is null", v.collection, v.id, v.field)
			}
			v.isNull = true
		} else {
			if err := json.Unmarshal(p, &values); err != nil {
				return fmt.Errorf("decoding value %q: %w", p, err)
			}
		}

		for _, e := range values {
			i, err := strconv.Atoi(e)
			if err != nil {
				return fmt.Errorf("converting value %q: %w", e, err)
			}
			v.value = append(v.value, i)
		}
	{{- else}}
		if p == nil {
			if v.required {
				return fmt.Errorf("database is corrupted. Required field %s/%d/%s is null", v.collection, v.id, v.field)
			}
			v.isNull = true
		} else {
			{{- if eq .TypeName "ValueIntSlice"}}
				r, err := fastjson.DecodeIntList(p)
				if err != nil {
					return fmt.Errorf("decoding value %q: %w", p, err)
				}
				v.value = r
			{{- else if eq .TypeName "ValueInt" }}
				r, err := fastjson.DecodeInt(p)
				if err != nil {
					return fmt.Errorf("decoding value %q: %w", p, err)
				}
				v.value = r
			{{- else }}
				if err := json.Unmarshal(p, &v.value); err != nil {
					return fmt.Errorf("decoding value %q: %w", p, err)
				}
			{{- end }}
		}
	{{- end}}

	for i := 0; i < len(v.lazies); i++ {
		*v.lazies[i] = v.value
	}

	v.executed = true
	return nil
}
