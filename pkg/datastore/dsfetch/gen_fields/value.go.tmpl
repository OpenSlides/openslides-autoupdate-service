// {{.TypeName}} is a value from the datastore.
type {{.TypeName}} struct {
	err      error

	key      dskey.Key
	required bool

	lazies []*{{.GoType}}

	fetch *Fetch
}

// Value returns the value.
func (v *{{.TypeName}}) Value(ctx context.Context) ({{.GoType}}, error) {
	var zero {{.GoType}}
	if err:=v.err; err != nil {
		return zero, v.err
	}

	rawValue, err := v.fetch.getOneKey(ctx, v.key)
	if err != nil {
		return zero, err
	}

	value, err := v.convert(rawValue)
	if err != nil {
		return zero, fmt.Errorf("converting raw value: %w", err)
	}

	return value, nil
}

// Lazy sets a value as soon as it es executed.
//
// Make sure to call request.Execute() before using the value.
func (v *{{.TypeName}}) Lazy(value *{{.GoType}}) {
	v.fetch.requested[v.key] = append(v.fetch.requested[v.key], v)
	v.lazies = append(v.lazies, value)
}

// Preload fetches the value but does nothing with it.
//
// This makes sure, that the value is in the cache.
//
// Make sure to call fetch.Execute().
func (v *{{.TypeName}}) Preload() {
	v.fetch.requested[v.key] = append(v.fetch.requested[v.key], v)
}

// convert converts the json value to the type.
func (v *{{.TypeName}}) convert(p []byte) ({{.GoType}}, error) {
	var zero {{.GoType}}
	if p == nil {
		if v.required {
			return zero, fmt.Errorf("database is corrupted. Required field %s is null", v.key)
		}
		return zero, nil
	} 

	{{- if eq .TypeName "ValueIntSlice"}}
		value, err := fastjson.DecodeIntList(p)
		if err != nil {
			return zero, fmt.Errorf("decoding value %q: %w", p, err)
		}
	{{- else if eq .TypeName "ValueInt" }}
		value, err := fastjson.DecodeInt(p)
		if err != nil {
			return zero, fmt.Errorf("decoding value %q: %w", p, err)
		}
	{{- else }}
		var value {{.GoType}}
		if err := json.Unmarshal(p, &value); err != nil {
			return zero, fmt.Errorf("decoding value %q: %w", p, err)
		}
	{{- end }}
	return value, nil
}

// setLazy sets the lazy values defiend with Lazy or Preload.
func (v *{{.TypeName}}) setLazy(p []byte) error {
	value, err := v.convert(p)
	if err != nil {
		return fmt.Errorf("converting value: %w", err)
	}

	for i := 0; i < len(v.lazies); i++ {
		*v.lazies[i] = value
	}

	return nil
}
